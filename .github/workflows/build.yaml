name: Build Pipeline

on:
  workflow_dispatch:
    inputs:
      pipeline_name:
        description: 'Name of the config pipeline to build and deploy'
        required: true
        type: choice
        options:
          - digit-ui
          - core-ui
          - workbench-ui
          - sandbox-ui
          - microplan-ui
          - console
          - payments-ui
          - storybook-svg
          - storybook
          - egov-bff
          - core-digit-ui
          - dss-ui
          - hrms-ui
          - karnataka-ui
          - meghalaya-ui

env:
  DOCKER_USERNAME: ${{ vars.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_ACCESS_TOKEN }}

jobs:
  resolve-config:
    runs-on: ubuntu-latest
    outputs:
      work_dir: ${{ steps.setenv.outputs.work_dir }}
      image_name: ${{ steps.setenv.outputs.image_name }}
      dockerfile: ${{ steps.setenv.outputs.dockerfile }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install yq
        run: |
          VERSION="4.30.8"
          URL="https://github.com/mikefarah/yq/releases/download/v${VERSION}/yq_linux_amd64"
          sudo curl -sSL "$URL" -o /usr/local/bin/yq
          sudo chmod +x /usr/local/bin/yq

      - name: Resolve env from build-config.yml
        id: setenv
        run: |
          PIPELINE_NAME="${{ github.event.inputs.pipeline_name }}"
          DEFAULT_DOCKERFILE="Dockerfile"
          
          # Step 1: List matching config blocks
          MATCHING_CONFIGS=$(yq eval -o=json '.config[] | select(.name | test("/'"$PIPELINE_NAME"'$"))' build/build-config.yml)
          
          # Step 2: Show matched config(s)
          echo "Matching config(s) for pipeline '$PIPELINE_NAME':"
          echo "$MATCHING_CONFIGS" | yq eval -P -  # pretty-print for readability
          
          # Step 3: Check count of matching configs
          MATCH_COUNT=$(echo "$MATCHING_CONFIGS" | yq eval -o=json '.' - | jq -s 'length')
          
          if [ "$MATCH_COUNT" -ne 1 ]; then
            echo "ERROR: Expected exactly 1 matching pipeline config, but found $MATCH_COUNT"
            exit 1
          fi
          
          # Step 4: Extract service build config (image-name not ending with -db)
          SERVICE_BUILD_CONFIG=$(yq eval -o=json '
            .config[]
            | select(.name | test("/'"$PIPELINE_NAME"'$"))
            | .build[]
            | select(.["image-name"])
            ' build/build-config.yml)
          
          # Step 5: Print for confirmation
          echo "SERVICE_BUILD_CONFIG: $SERVICE_BUILD_CONFIG"
          
          # Step 6: Extract Required Environment Variables
          SERVICE_DOCKERFILE=$(echo "$SERVICE_BUILD_CONFIG" | yq eval -r '.dockerfile // ""' -)
          SERVICE_IMAGE_NAME=$(echo "$SERVICE_BUILD_CONFIG" | yq eval -r '.["image-name"] // ""' -)
          SERVICE_WORK_DIR=$(echo "$SERVICE_BUILD_CONFIG" | yq eval -r '.["work-dir"] // ""' -)
          
          echo "Work Directory: $SERVICE_WORK_DIR"
          echo "Image Name: $SERVICE_IMAGE_NAME"
          echo "Dockerfile: $SERVICE_DOCKERFILE"
          
          # Step 7: Set Default Dockerfile if service dockerfile config is missing
          if [ -z "$SERVICE_DOCKERFILE" ]; then
            echo "No dockerfile entry found for \"$SERVICE\" in build-config.yml; using default"
            SERVICE_DOCKERFILE="$SERVICE_WORK_DIR/$DEFAULT_DOCKERFILE"
          fi
          
          # Step 8: Export to github environment & output
          echo "SERVICE_WORK_DIR=$SERVICE_WORK_DIR" >> "$GITHUB_ENV"
          echo "SERVICE_IMAGE_NAME=$SERVICE_IMAGE_NAME" >> "$GITHUB_ENV"
          echo "SERVICE_DOCKERFILE=$SERVICE_DOCKERFILE" >> "$GITHUB_ENV"
          echo "work_dir=$SERVICE_WORK_DIR" >> $GITHUB_OUTPUT
          echo "image_name=$SERVICE_IMAGE_NAME" >> $GITHUB_OUTPUT
          echo "dockerfile=$SERVICE_DOCKERFILE" >> $GITHUB_OUTPUT
          missing_vars=()
          
          for var in SERVICE_WORK_DIR SERVICE_IMAGE_NAME SERVICE_DOCKERFILE; do
            if [ -z "${!var}" ]; then
              echo "ERROR: $var is not set or is empty"
              missing_vars+=("$var")
            fi
          done
          
          if [ ${#missing_vars[@]} -gt 0 ]; then
            echo "Required environment variables are missing: ${missing_vars[*]}"
            exit 1  # Fail the step
          fi

  #  build-profile:
  #    needs: resolve-config
  #    uses: ./.github/workflows/build-${{ needs.resolve-config.outputs.build_profile }}.yml
  #    with:
  #      work_dir: ${{ needs.resolve-config.outputs.work_dir }}
  #      image_name: ${{ needs.resolve-config.outputs.image_name }}
  #      dockerfile: ${{ needs.resolve-config.outputs.dockerfile }}

  build-matrix:
    needs: [resolve-config]
    strategy:
      matrix:
        include:
          - arch: amd64
            platform: linux/amd64
            runner: ubuntu-latest
          - arch: arm64
            platform: linux/arm64
            runner: ubuntu-24.04-arm
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker Layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-${{ matrix.arch }}-buildx-${{ github.event.inputs.pipeline_name }}-${{ github.ref_name }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.arch }}-buildx-

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Build image for ${{ matrix.arch }}
        run: |
          docker buildx build \
            --platform ${{ matrix.platform }} \
            --build-arg WORK_DIR=${{ needs.resolve-config.outputs.work_dir }} \
            --file ${{ needs.resolve-config.outputs.dockerfile }} \
            --tag egovio/${{ needs.resolve-config.outputs.image_name }}:${{ matrix.arch }} \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache,mode=max \
            --push .

  create-manifest:
    needs: [build-matrix, resolve-config]
    runs-on: ubuntu-latest
    steps:
      - name: Create and push manifest
        run: |
          docker manifest create egovio/${{ needs.resolve-config.outputs.image_name }}:latest \
            --amend egovio/${{ needs.resolve-config.outputs.image_name }}:amd64 \
            --amend egovio/${{ needs.resolve-config.outputs.image_name }}:arm64

          docker manifest push egovio/${{ needs.resolve-config.outputs.image_name }}:latest
